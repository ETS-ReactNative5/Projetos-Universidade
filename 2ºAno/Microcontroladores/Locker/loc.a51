#include <at89c51xd2.inc>

CSEG AT 0H
JMP SETUP


KEY DATA 50H
SEC_KEY DATA 55H
NEXT_STATE DATA 60H
K_LOAD EQU P3.3
K_SET EQU P3.5
DISPLAY EQU P1
INDEX EQU R3
COMP EQU R4
NUM_TENT EQU R6
S_LOCKED EQU 0H
S_OPEN EQU 1H
S_CLOSE EQU 2H
S_ALARM EQU 3H

CSEG AT 50H
	
STATE_TB: DB 0BCH, 0E4H, 035H, 005H

NUMBERS: DB 00CH, 0CFH, 054H, 046H, 087H, 026H, 024H, 04FH, 004H, 006H

SETUP:
	SETB K_LOAD
	SETB K_SET
	MOV NEXT_STATE, #S_LOCKED
	MOV R2 , #000H
	MOV COMP , #000H
	CALL DEFINE
	CALL ENCRYPT_KEY
	JMP MAIN
DEFINE:
	MOV NUM_TENT, #000H
	MOV INDEX, #004H
	MOV R0, #KEY
	MOV 55H, #1
	MOV 56H, #1
	MOV 57H, #1
	MOV 58H, #1
	MOV R1, #55H
	RET
	
MAIN:
	JNB K_LOAD,$
	MOV A, NEXT_STATE
	MOV DPTR, #JUMP_TB
	RL A
	JMP @A+DPTR

JUMP_TB:
	AJMP LOCKED
	AJMP OPEN
	AJMP CLOSE
	AJMP ALARM
	
PRINT_STATE:
	MOV DPTR, #STATE_TB
	MOVC A, @A+DPTR 
	MOV DISPLAY, A
	RET
RESET_VARS:
	MOV INDEX,#0004H
	MOV R1, #55H
	MOV R0, #50H
	RET
LOCKED:						;estado
	CALL RESET_VARS
	MOV A, #S_LOCKED
	CALL PRINT_STATE
	CALL SEMI_SET_KEY
	CALL COMPARE_KEY
	MOV A, COMP
	CJNE A, #001H,SUCCESS
	MOV NEXT_STATE, #S_CLOSE
	JMP MAIN
SUCCESS:	
	MOV NEXT_STATE, #S_OPEN
	JMP MAIN
	
OPEN:						;estado
	MOV A, #S_OPEN
	MOV NUM_TENT, #000H
	CALL PRINT_STATE
LOOP:
	JNB K_SET, NEW_KEY		
	JNB K_LOAD, LOCK
	JMP LOOP

ALARM:						;estado
	MOV A ,#S_ALARM
	CALL PRINT_STATE
	CALL WAVE
WAVE:
	MOV TMOD, #01H
LOOP_3:
	MOV TH0,#07FH
	MOV TL0,#000H
	SETB TR0

WAIT:
	JNB TF0,WAIT
	CLR TR0
	CLR TF0
	CPL P2.0
	JNB K_LOAD, FLAG
	SJMP LOOP_3

FLAG:
	JNB K_LOAD,$
	MOV A, #000H
	MOV INDEX, #004H
	MOV R0, #55H
	JMP NEW_KEY

NEW_KEY:
	JNB K_SET, $
	MOV A, #000H
	MOV INDEX, #004H
	MOV R0, #55H
	CALL SET_KEY
	MOV R1, #55H
	MOV INDEX, #004H
	CALL ENCRYPT_KEY
LOCK:
	MOV NEXT_STATE, #S_LOCKED
	JMP MAIN

SEMI_SET_KEY:
	MOV A, #000H
	MOV INDEX, #004H
	MOV R1, #55H
	MOV R0, #50H
	JB K_LOAD, $
	JNB K_LOAD, $
	CALL SET_KEY
	RET

SET_KEY:
	MOV DPTR, #NUMBERS
	MOV A, R2
	MOVC A, @A+DPTR
	MOV DISPLAY, A
LOOP_1:
	JNB K_SET, INC_NUMBER		
	JNB K_LOAD, SELECT_NUMBER
	JMP LOOP_1
	
INC_NUMBER:
	JNB K_SET, $
	INC R2
	CJNE R2, #00AH, NOT_10
	MOV R2 , #000H
NOT_10:
	JMP SET_KEY
	
SELECT_NUMBER:
	JNB K_LOAD, $
	MOV A, R2
	MOV @R0, A
	INC R0
	MOV R2, #000H
	DJNZ INDEX, SET_KEY
	RET
	
ENCRYPT_KEY:	
	MOV A, @R1
	RL A
	MOV @R1, A
	INC R1
	DJNZ INDEX, ENCRYPT_KEY
	RET
DECRYPT_KEY:	
	MOV A, @R1
	RR A
	MOV @R1, A
	INC R1
	DJNZ INDEX, DECRYPT_KEY
	RET
	
CLEAR_KEY:
	MOV A, @R0
	CLR A
	MOV @R0,A
	INC INDEX
	CJNE INDEX,#004H,CLEAR_KEY
	RET
	
COMPARE_KEY:
	MOV R0, #KEY
	MOV R1,#55H
	MOV INDEX,#004H
	MOV COMP, #000H
	CALL DECRYPT_KEY
	CALL COMPARE_1
	CALL COMPARE_2
	CALL COMPARE_3
	CALL COMPARE_4
	MOV INDEX,#004H
	MOV R1, #55H
	MOV R0,#50H
	CALL CLEAR_KEY
	CALL ENCRYPT_KEY
	RET 

COMPARE_1:
	MOV A, @R0
	CJNE A, 55H,  END_COMPARE
	INC R0
	RET
COMPARE_2:
	MOV A, @R0
	CJNE A, 56H,  END_COMPARE
	INC R0
	RET
COMPARE_3:
	MOV A, @R0
	CJNE A, 57H,  END_COMPARE
	INC R0
	RET
COMPARE_4:
	MOV A, @R0
	CJNE A, 58H,  END_COMPARE
	RET
END_COMPARE:
	MOV COMP, #001H
	INC R0
	RET
	
CLOSE:						;estado
	MOV A, #S_CLOSE
	CALL PRINT_STATE
	INC NUM_TENT
	CJNE NUM_TENT,#005H, CONTINUE
	MOV NUM_TENT, #000H
	JMP SEMI_ALARM
CONTINUE:
	CALL NEW_TIME
	CALL CONFIG_TIMER
	MOV NEXT_STATE, #S_LOCKED
	JMP MAIN
	
NEW_TIME:
	MOV B, NUM_TENT
	MOV A, #001H
	MUL AB
	MOV R7, A
	MOV A,#000H
	RET
	
SEMI_ALARM:
	MOV NEXT_STATE, #S_ALARM
	JMP MAIN
	
CONFIG_TIMER:
	MOV TMOD,#01H
TIMER:
	MOV TL0,#03CH ;FFFFh+1 - 50 000(50ms) = 3CB0h(contagem de 50 ms)
	MOV TH0,#0B0H
	SETB TR0 ;start timer 0
	JNB TF0,$
	CLR TF0
	CLR TR0
	INC A
	CJNE A, #060D, TIMER
	MOV A,#000H
	DJNZ R7,TIMER
	CLR TR0
	RET
END	

